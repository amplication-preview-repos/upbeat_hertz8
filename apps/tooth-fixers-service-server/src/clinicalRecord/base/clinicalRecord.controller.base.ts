/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClinicalRecordService } from "../clinicalRecord.service";
import { ClinicalRecordCreateInput } from "./ClinicalRecordCreateInput";
import { ClinicalRecord } from "./ClinicalRecord";
import { ClinicalRecordFindManyArgs } from "./ClinicalRecordFindManyArgs";
import { ClinicalRecordWhereUniqueInput } from "./ClinicalRecordWhereUniqueInput";
import { ClinicalRecordUpdateInput } from "./ClinicalRecordUpdateInput";

export class ClinicalRecordControllerBase {
  constructor(protected readonly service: ClinicalRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClinicalRecord })
  async createClinicalRecord(
    @common.Body() data: ClinicalRecordCreateInput
  ): Promise<ClinicalRecord> {
    return await this.service.createClinicalRecord({
      data: {
        ...data,

        biodata: data.biodata
          ? {
              connect: data.biodata,
            }
          : undefined,
      },
      select: {
        biodata: {
          select: {
            id: true,
          },
        },

        clinicDate: true,
        createdAt: true,
        dateOfNextAppointment: true,
        id: true,
        medicinePrescribed: true,
        natureOfAilment: true,
        procedureUndertaken: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClinicalRecord] })
  @ApiNestedQuery(ClinicalRecordFindManyArgs)
  async clinicalRecords(
    @common.Req() request: Request
  ): Promise<ClinicalRecord[]> {
    const args = plainToClass(ClinicalRecordFindManyArgs, request.query);
    return this.service.clinicalRecords({
      ...args,
      select: {
        biodata: {
          select: {
            id: true,
          },
        },

        clinicDate: true,
        createdAt: true,
        dateOfNextAppointment: true,
        id: true,
        medicinePrescribed: true,
        natureOfAilment: true,
        procedureUndertaken: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClinicalRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clinicalRecord(
    @common.Param() params: ClinicalRecordWhereUniqueInput
  ): Promise<ClinicalRecord | null> {
    const result = await this.service.clinicalRecord({
      where: params,
      select: {
        biodata: {
          select: {
            id: true,
          },
        },

        clinicDate: true,
        createdAt: true,
        dateOfNextAppointment: true,
        id: true,
        medicinePrescribed: true,
        natureOfAilment: true,
        procedureUndertaken: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClinicalRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClinicalRecord(
    @common.Param() params: ClinicalRecordWhereUniqueInput,
    @common.Body() data: ClinicalRecordUpdateInput
  ): Promise<ClinicalRecord | null> {
    try {
      return await this.service.updateClinicalRecord({
        where: params,
        data: {
          ...data,

          biodata: data.biodata
            ? {
                connect: data.biodata,
              }
            : undefined,
        },
        select: {
          biodata: {
            select: {
              id: true,
            },
          },

          clinicDate: true,
          createdAt: true,
          dateOfNextAppointment: true,
          id: true,
          medicinePrescribed: true,
          natureOfAilment: true,
          procedureUndertaken: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClinicalRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClinicalRecord(
    @common.Param() params: ClinicalRecordWhereUniqueInput
  ): Promise<ClinicalRecord | null> {
    try {
      return await this.service.deleteClinicalRecord({
        where: params,
        select: {
          biodata: {
            select: {
              id: true,
            },
          },

          clinicDate: true,
          createdAt: true,
          dateOfNextAppointment: true,
          id: true,
          medicinePrescribed: true,
          natureOfAilment: true,
          procedureUndertaken: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
