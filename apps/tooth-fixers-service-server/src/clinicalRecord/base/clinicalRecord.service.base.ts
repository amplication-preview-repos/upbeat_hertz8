/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClinicalRecord as PrismaClinicalRecord,
  Biodata as PrismaBiodata,
} from "@prisma/client";

export class ClinicalRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClinicalRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clinicalRecord.count(args);
  }

  async clinicalRecords(
    args: Prisma.ClinicalRecordFindManyArgs
  ): Promise<PrismaClinicalRecord[]> {
    return this.prisma.clinicalRecord.findMany(args);
  }
  async clinicalRecord(
    args: Prisma.ClinicalRecordFindUniqueArgs
  ): Promise<PrismaClinicalRecord | null> {
    return this.prisma.clinicalRecord.findUnique(args);
  }
  async createClinicalRecord(
    args: Prisma.ClinicalRecordCreateArgs
  ): Promise<PrismaClinicalRecord> {
    return this.prisma.clinicalRecord.create(args);
  }
  async updateClinicalRecord(
    args: Prisma.ClinicalRecordUpdateArgs
  ): Promise<PrismaClinicalRecord> {
    return this.prisma.clinicalRecord.update(args);
  }
  async deleteClinicalRecord(
    args: Prisma.ClinicalRecordDeleteArgs
  ): Promise<PrismaClinicalRecord> {
    return this.prisma.clinicalRecord.delete(args);
  }

  async getBiodata(parentId: string): Promise<PrismaBiodata | null> {
    return this.prisma.clinicalRecord
      .findUnique({
        where: { id: parentId },
      })
      .biodata();
  }
}
