/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClinicalRecord } from "./ClinicalRecord";
import { ClinicalRecordCountArgs } from "./ClinicalRecordCountArgs";
import { ClinicalRecordFindManyArgs } from "./ClinicalRecordFindManyArgs";
import { ClinicalRecordFindUniqueArgs } from "./ClinicalRecordFindUniqueArgs";
import { CreateClinicalRecordArgs } from "./CreateClinicalRecordArgs";
import { UpdateClinicalRecordArgs } from "./UpdateClinicalRecordArgs";
import { DeleteClinicalRecordArgs } from "./DeleteClinicalRecordArgs";
import { Biodata } from "../../biodata/base/Biodata";
import { ClinicalRecordService } from "../clinicalRecord.service";
@graphql.Resolver(() => ClinicalRecord)
export class ClinicalRecordResolverBase {
  constructor(protected readonly service: ClinicalRecordService) {}

  async _clinicalRecordsMeta(
    @graphql.Args() args: ClinicalRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClinicalRecord])
  async clinicalRecords(
    @graphql.Args() args: ClinicalRecordFindManyArgs
  ): Promise<ClinicalRecord[]> {
    return this.service.clinicalRecords(args);
  }

  @graphql.Query(() => ClinicalRecord, { nullable: true })
  async clinicalRecord(
    @graphql.Args() args: ClinicalRecordFindUniqueArgs
  ): Promise<ClinicalRecord | null> {
    const result = await this.service.clinicalRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClinicalRecord)
  async createClinicalRecord(
    @graphql.Args() args: CreateClinicalRecordArgs
  ): Promise<ClinicalRecord> {
    return await this.service.createClinicalRecord({
      ...args,
      data: {
        ...args.data,

        biodata: args.data.biodata
          ? {
              connect: args.data.biodata,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ClinicalRecord)
  async updateClinicalRecord(
    @graphql.Args() args: UpdateClinicalRecordArgs
  ): Promise<ClinicalRecord | null> {
    try {
      return await this.service.updateClinicalRecord({
        ...args,
        data: {
          ...args.data,

          biodata: args.data.biodata
            ? {
                connect: args.data.biodata,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClinicalRecord)
  async deleteClinicalRecord(
    @graphql.Args() args: DeleteClinicalRecordArgs
  ): Promise<ClinicalRecord | null> {
    try {
      return await this.service.deleteClinicalRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Biodata, {
    nullable: true,
    name: "biodata",
  })
  async getBiodata(
    @graphql.Parent() parent: ClinicalRecord
  ): Promise<Biodata | null> {
    const result = await this.service.getBiodata(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
