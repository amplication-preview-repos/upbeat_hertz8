/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Biodata as PrismaBiodata,
  ClinicalRecord as PrismaClinicalRecord,
} from "@prisma/client";

export class BiodataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BiodataCountArgs, "select">): Promise<number> {
    return this.prisma.biodata.count(args);
  }

  async biodataItems(
    args: Prisma.BiodataFindManyArgs
  ): Promise<PrismaBiodata[]> {
    return this.prisma.biodata.findMany(args);
  }
  async biodata(
    args: Prisma.BiodataFindUniqueArgs
  ): Promise<PrismaBiodata | null> {
    return this.prisma.biodata.findUnique(args);
  }
  async createBiodata(args: Prisma.BiodataCreateArgs): Promise<PrismaBiodata> {
    return this.prisma.biodata.create(args);
  }
  async updateBiodata(args: Prisma.BiodataUpdateArgs): Promise<PrismaBiodata> {
    return this.prisma.biodata.update(args);
  }
  async deleteBiodata(args: Prisma.BiodataDeleteArgs): Promise<PrismaBiodata> {
    return this.prisma.biodata.delete(args);
  }

  async findClinicalRecords(
    parentId: string,
    args: Prisma.ClinicalRecordFindManyArgs
  ): Promise<PrismaClinicalRecord[]> {
    return this.prisma.biodata
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .clinicalRecords(args);
  }
}
