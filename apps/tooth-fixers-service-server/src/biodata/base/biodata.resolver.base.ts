/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Biodata } from "./Biodata";
import { BiodataCountArgs } from "./BiodataCountArgs";
import { BiodataFindManyArgs } from "./BiodataFindManyArgs";
import { BiodataFindUniqueArgs } from "./BiodataFindUniqueArgs";
import { CreateBiodataArgs } from "./CreateBiodataArgs";
import { UpdateBiodataArgs } from "./UpdateBiodataArgs";
import { DeleteBiodataArgs } from "./DeleteBiodataArgs";
import { ClinicalRecordFindManyArgs } from "../../clinicalRecord/base/ClinicalRecordFindManyArgs";
import { ClinicalRecord } from "../../clinicalRecord/base/ClinicalRecord";
import { BiodataService } from "../biodata.service";
@graphql.Resolver(() => Biodata)
export class BiodataResolverBase {
  constructor(protected readonly service: BiodataService) {}

  async _biodataItemsMeta(
    @graphql.Args() args: BiodataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Biodata])
  async biodataItems(
    @graphql.Args() args: BiodataFindManyArgs
  ): Promise<Biodata[]> {
    return this.service.biodataItems(args);
  }

  @graphql.Query(() => Biodata, { nullable: true })
  async biodata(
    @graphql.Args() args: BiodataFindUniqueArgs
  ): Promise<Biodata | null> {
    const result = await this.service.biodata(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Biodata)
  async createBiodata(
    @graphql.Args() args: CreateBiodataArgs
  ): Promise<Biodata> {
    return await this.service.createBiodata({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Biodata)
  async updateBiodata(
    @graphql.Args() args: UpdateBiodataArgs
  ): Promise<Biodata | null> {
    try {
      return await this.service.updateBiodata({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Biodata)
  async deleteBiodata(
    @graphql.Args() args: DeleteBiodataArgs
  ): Promise<Biodata | null> {
    try {
      return await this.service.deleteBiodata(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ClinicalRecord], { name: "clinicalRecords" })
  async findClinicalRecords(
    @graphql.Parent() parent: Biodata,
    @graphql.Args() args: ClinicalRecordFindManyArgs
  ): Promise<ClinicalRecord[]> {
    const results = await this.service.findClinicalRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
