/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BiodataService } from "../biodata.service";
import { BiodataCreateInput } from "./BiodataCreateInput";
import { Biodata } from "./Biodata";
import { BiodataFindManyArgs } from "./BiodataFindManyArgs";
import { BiodataWhereUniqueInput } from "./BiodataWhereUniqueInput";
import { BiodataUpdateInput } from "./BiodataUpdateInput";
import { ClinicalRecordFindManyArgs } from "../../clinicalRecord/base/ClinicalRecordFindManyArgs";
import { ClinicalRecord } from "../../clinicalRecord/base/ClinicalRecord";
import { ClinicalRecordWhereUniqueInput } from "../../clinicalRecord/base/ClinicalRecordWhereUniqueInput";

export class BiodataControllerBase {
  constructor(protected readonly service: BiodataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Biodata })
  async createBiodata(
    @common.Body() data: BiodataCreateInput
  ): Promise<Biodata> {
    return await this.service.createBiodata({
      data: data,
      select: {
        createdAt: true,
        dateOfBirth: true,
        dateOfRegistration: true,
        firstName: true,
        homeAddress: true,
        id: true,
        middleName: true,
        surname: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Biodata] })
  @ApiNestedQuery(BiodataFindManyArgs)
  async biodataItems(@common.Req() request: Request): Promise<Biodata[]> {
    const args = plainToClass(BiodataFindManyArgs, request.query);
    return this.service.biodataItems({
      ...args,
      select: {
        createdAt: true,
        dateOfBirth: true,
        dateOfRegistration: true,
        firstName: true,
        homeAddress: true,
        id: true,
        middleName: true,
        surname: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Biodata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async biodata(
    @common.Param() params: BiodataWhereUniqueInput
  ): Promise<Biodata | null> {
    const result = await this.service.biodata({
      where: params,
      select: {
        createdAt: true,
        dateOfBirth: true,
        dateOfRegistration: true,
        firstName: true,
        homeAddress: true,
        id: true,
        middleName: true,
        surname: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Biodata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBiodata(
    @common.Param() params: BiodataWhereUniqueInput,
    @common.Body() data: BiodataUpdateInput
  ): Promise<Biodata | null> {
    try {
      return await this.service.updateBiodata({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfBirth: true,
          dateOfRegistration: true,
          firstName: true,
          homeAddress: true,
          id: true,
          middleName: true,
          surname: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Biodata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBiodata(
    @common.Param() params: BiodataWhereUniqueInput
  ): Promise<Biodata | null> {
    try {
      return await this.service.deleteBiodata({
        where: params,
        select: {
          createdAt: true,
          dateOfBirth: true,
          dateOfRegistration: true,
          firstName: true,
          homeAddress: true,
          id: true,
          middleName: true,
          surname: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/clinicalRecords")
  @ApiNestedQuery(ClinicalRecordFindManyArgs)
  async findClinicalRecords(
    @common.Req() request: Request,
    @common.Param() params: BiodataWhereUniqueInput
  ): Promise<ClinicalRecord[]> {
    const query = plainToClass(ClinicalRecordFindManyArgs, request.query);
    const results = await this.service.findClinicalRecords(params.id, {
      ...query,
      select: {
        biodata: {
          select: {
            id: true,
          },
        },

        clinicDate: true,
        createdAt: true,
        dateOfNextAppointment: true,
        id: true,
        medicinePrescribed: true,
        natureOfAilment: true,
        procedureUndertaken: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clinicalRecords")
  async connectClinicalRecords(
    @common.Param() params: BiodataWhereUniqueInput,
    @common.Body() body: ClinicalRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clinicalRecords: {
        connect: body,
      },
    };
    await this.service.updateBiodata({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clinicalRecords")
  async updateClinicalRecords(
    @common.Param() params: BiodataWhereUniqueInput,
    @common.Body() body: ClinicalRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clinicalRecords: {
        set: body,
      },
    };
    await this.service.updateBiodata({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clinicalRecords")
  async disconnectClinicalRecords(
    @common.Param() params: BiodataWhereUniqueInput,
    @common.Body() body: ClinicalRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clinicalRecords: {
        disconnect: body,
      },
    };
    await this.service.updateBiodata({
      where: params,
      data,
      select: { id: true },
    });
  }
}
